/**
 * miles-credit-retail
 * This functional service supports the creation and follow-up of **credit applications**.    For more information, check the **Read Me** tab.
 *
 * The version of the OpenAPI document: 1.29.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApplicantCreditScore } from '../model/applicant-credit-score';
// @ts-ignore
import { CreateCreditApplicationRequest } from '../model/create-credit-application-request';
// @ts-ignore
import { CreatedCreditApplication } from '../model/created-credit-application';
// @ts-ignore
import { CreditApplication } from '../model/credit-application';
// @ts-ignore
import { CreditApplicationViolations } from '../model/credit-application-violations';
// @ts-ignore
import { ExceptionInfoDTO } from '../model/exception-info-dto';
// @ts-ignore
import { FindCreditApplicationsResponse } from '../model/find-credit-applications-response';
// @ts-ignore
import { FindDocumentResponse } from '../model/find-document-response';
// @ts-ignore
import { FindStipulationsResponse } from '../model/find-stipulations-response';
// @ts-ignore
import { ReopenCreditApplicationRequest } from '../model/reopen-credit-application-request';
// @ts-ignore
import { ReopenedCreditApplication } from '../model/reopened-credit-application';
// @ts-ignore
import { SubmitCreditApplication } from '../model/submit-credit-application';
// @ts-ignore
import { UpdateApplicantCreditScoreRequest } from '../model/update-applicant-credit-score-request';
// @ts-ignore
import { UpdateApplicantCreditScoreResponse } from '../model/update-applicant-credit-score-response';
// @ts-ignore
import { UpdateApplicantsRequest } from '../model/update-applicants-request';
// @ts-ignore
import { UpdateCreditApplicationRequest } from '../model/update-credit-application-request';
// @ts-ignore
import { UpdateCreditApplicationResponse } from '../model/update-credit-application-response';
// @ts-ignore
import { UpdatedApplicantsCreditApplication } from '../model/updated-applicants-credit-application';
// @ts-ignore
import { UploadApplicantCreditScoreStipulationDocumentResponse } from '../model/upload-applicant-credit-score-stipulation-document-response';
// @ts-ignore
import { UploadCreditApplicationStipulationDocumentResponse } from '../model/upload-credit-application-stipulation-document-response';
// @ts-ignore
import { WarningsInfoDTO } from '../model/warnings-info-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class CreditApplicationResourceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Cancel credit application
     * This endpoint cancels a credit application based on its ID.
     * @param creditApplicationId The ID of the credit application
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelCreditApplication(creditApplicationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public cancelCreditApplication(creditApplicationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public cancelCreditApplication(creditApplicationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public cancelCreditApplication(creditApplicationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling cancelCreditApplication.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/cancellations`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create credit application
     * This endpoint creates a credit application.
     * @param createCreditApplicationRequest The information needed to create a credit application:
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCreditApplication(createCreditApplicationRequest: CreateCreditApplicationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CreatedCreditApplication>;
    public createCreditApplication(createCreditApplicationRequest: CreateCreditApplicationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CreatedCreditApplication>>;
    public createCreditApplication(createCreditApplicationRequest: CreateCreditApplicationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CreatedCreditApplication>>;
    public createCreditApplication(createCreditApplicationRequest: CreateCreditApplicationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (createCreditApplicationRequest === null || createCreditApplicationRequest === undefined) {
            throw new Error('Required parameter createCreditApplicationRequest was null or undefined when calling createCreditApplication.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications`;
        return this.httpClient.request<CreatedCreditApplication>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: createCreditApplicationRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete applicant credit score stipulation document
     * This endpoint deletes a document attached to a stipulation of an applicant credit score.
     * @param creditApplicationId The ID of the credit application
     * @param applicantCreditScoreId The ID of the applicant credit score
     * @param stipulationId The ID of the stipulation
     * @param documentId The ID of the document
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling deleteApplicantCreditScoreStipulationDocument.');
        }
        if (applicantCreditScoreId === null || applicantCreditScoreId === undefined) {
            throw new Error('Required parameter applicantCreditScoreId was null or undefined when calling deleteApplicantCreditScoreStipulationDocument.');
        }
        if (stipulationId === null || stipulationId === undefined) {
            throw new Error('Required parameter stipulationId was null or undefined when calling deleteApplicantCreditScoreStipulationDocument.');
        }
        if (documentId === null || documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling deleteApplicantCreditScoreStipulationDocument.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicant-credit-scores/${this.configuration.encodeParam({name: "applicantCreditScoreId", value: applicantCreditScoreId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/${this.configuration.encodeParam({name: "stipulationId", value: stipulationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/${this.configuration.encodeParam({name: "documentId", value: documentId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete credit application stipulation document
     * This endpoint deletes a document attached to a stipulation of a credit application.
     * @param creditApplicationId The ID of the credit application
     * @param stipulationId The ID of the stipulation
     * @param documentId The ID of the document
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling deleteCreditApplicationStipulationDocument.');
        }
        if (stipulationId === null || stipulationId === undefined) {
            throw new Error('Required parameter stipulationId was null or undefined when calling deleteCreditApplicationStipulationDocument.');
        }
        if (documentId === null || documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling deleteCreditApplicationStipulationDocument.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/${this.configuration.encodeParam({name: "stipulationId", value: stipulationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/${this.configuration.encodeParam({name: "documentId", value: documentId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download applicant credit score stipulation document
     * This endpoint downloads a document attached to a stipulation of an applicant credit score.
     * @param creditApplicationId The ID of the credit application
     * @param applicantCreditScoreId The ID of the applicant credit score
     * @param stipulationId The ID of the stipulation
     * @param documentId The ID of the document
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public downloadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public downloadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public downloadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, documentId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling downloadApplicantCreditScoreStipulationDocument.');
        }
        if (applicantCreditScoreId === null || applicantCreditScoreId === undefined) {
            throw new Error('Required parameter applicantCreditScoreId was null or undefined when calling downloadApplicantCreditScoreStipulationDocument.');
        }
        if (stipulationId === null || stipulationId === undefined) {
            throw new Error('Required parameter stipulationId was null or undefined when calling downloadApplicantCreditScoreStipulationDocument.');
        }
        if (documentId === null || documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling downloadApplicantCreditScoreStipulationDocument.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicant-credit-scores/${this.configuration.encodeParam({name: "applicantCreditScoreId", value: applicantCreditScoreId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/${this.configuration.encodeParam({name: "stipulationId", value: stipulationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/${this.configuration.encodeParam({name: "documentId", value: documentId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download credit application stipulation document
     * This endpoint downloads a document attached to a stipulation of a credit application.
     * @param creditApplicationId The ID of the credit application
     * @param stipulationId The ID of the stipulation
     * @param documentId The ID of the document
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public downloadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public downloadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public downloadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, documentId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling downloadCreditApplicationStipulationDocument.');
        }
        if (stipulationId === null || stipulationId === undefined) {
            throw new Error('Required parameter stipulationId was null or undefined when calling downloadCreditApplicationStipulationDocument.');
        }
        if (documentId === null || documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling downloadCreditApplicationStipulationDocument.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/${this.configuration.encodeParam({name: "stipulationId", value: stipulationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/${this.configuration.encodeParam({name: "documentId", value: documentId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find a list of attached documents linked to applicant credit score stipulations
     * This endpoint retrieves attached documents that are linked to the credit applicant.
     * @param creditApplicationId The ID of the credit application
     * @param applicantCreditScoreId The ID of the applicant credit score
     * @param count The maximum number of elements to be returned
     * @param offset The number of elements to skip before returning the requested list of elements
     * @param sortBy List of order clauses in which the elements will be returned, deprecated since 2022-09-06 and version 1.184.0 in favor of sorting
     * @param sorting List of order clauses in which the elements will be returned
     * @param stipulationId The IDs of stipulations that need to be filtered
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findApplicantCreditScoreStipulationDocuments(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<FindDocumentResponse>;
    public findApplicantCreditScoreStipulationDocuments(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<FindDocumentResponse>>;
    public findApplicantCreditScoreStipulationDocuments(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<FindDocumentResponse>>;
    public findApplicantCreditScoreStipulationDocuments(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling findApplicantCreditScoreStipulationDocuments.');
        }
        if (applicantCreditScoreId === null || applicantCreditScoreId === undefined) {
            throw new Error('Required parameter applicantCreditScoreId was null or undefined when calling findApplicantCreditScoreStipulationDocuments.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (count !== undefined && count !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>count, 'count');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sort_by');
            })
        }
        if (sorting) {
            sorting.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sorting');
            })
        }
        if (stipulationId) {
            stipulationId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'stipulation_id');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicant-credit-scores/${this.configuration.encodeParam({name: "applicantCreditScoreId", value: applicantCreditScoreId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/documents`;
        return this.httpClient.request<FindDocumentResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find applicant credit score stipulations
     * This endpoint retrieves stipulations linked to an applicant credit score.
     * @param creditApplicationId The ID of the credit application
     * @param applicantCreditScoreId The ID of the applicant credit score
     * @param count The maximum number of elements to be returned
     * @param offset The number of elements to skip before returning the requested list of elements
     * @param sortBy List of order clauses in which the elements will be returned, deprecated since 2022-09-06 and version 1.184.0 in favor of sorting
     * @param sorting List of order clauses in which the elements will be returned
     * @param stipulationId The IDs of stipulations that need to be filtered
     * @param stipulationTypeId The type IDs of stipulations that need to be filtered
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findApplicantCreditScoreStipulations(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<FindStipulationsResponse>;
    public findApplicantCreditScoreStipulations(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<FindStipulationsResponse>>;
    public findApplicantCreditScoreStipulations(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<FindStipulationsResponse>>;
    public findApplicantCreditScoreStipulations(creditApplicationId: string, applicantCreditScoreId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling findApplicantCreditScoreStipulations.');
        }
        if (applicantCreditScoreId === null || applicantCreditScoreId === undefined) {
            throw new Error('Required parameter applicantCreditScoreId was null or undefined when calling findApplicantCreditScoreStipulations.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (count !== undefined && count !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>count, 'count');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sort_by');
            })
        }
        if (sorting) {
            sorting.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sorting');
            })
        }
        if (stipulationId) {
            stipulationId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'stipulation_id');
            })
        }
        if (stipulationTypeId) {
            stipulationTypeId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'stipulation_type_id');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicant-credit-scores/${this.configuration.encodeParam({name: "applicantCreditScoreId", value: applicantCreditScoreId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations`;
        return this.httpClient.request<FindStipulationsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find a list of attached documents linked to credit application stipulations
     * This endpoint retrieves attached documents that are linked to the credit application.
     * @param creditApplicationId The ID of the credit application
     * @param count The maximum number of elements to be returned
     * @param offset The number of elements to skip before returning the requested list of elements
     * @param sortBy List of order clauses in which the elements will be returned, deprecated since 2022-09-06 and version 1.184.0 in favor of sorting
     * @param sorting List of order clauses in which the elements will be returned
     * @param stipulationId The IDs of stipulations that need to be filtered
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCreditApplicationStipulationDocuments(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<FindDocumentResponse>;
    public findCreditApplicationStipulationDocuments(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<FindDocumentResponse>>;
    public findCreditApplicationStipulationDocuments(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<FindDocumentResponse>>;
    public findCreditApplicationStipulationDocuments(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling findCreditApplicationStipulationDocuments.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (count !== undefined && count !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>count, 'count');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sort_by');
            })
        }
        if (sorting) {
            sorting.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sorting');
            })
        }
        if (stipulationId) {
            stipulationId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'stipulation_id');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/documents`;
        return this.httpClient.request<FindDocumentResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find credit application stipulations
     * This endpoint retrieves stipulations linked to a credit application.
     * @param creditApplicationId The ID of the credit application
     * @param count The maximum number of elements to be returned
     * @param offset The number of elements to skip before returning the requested list of elements
     * @param sortBy List of order clauses in which the elements will be returned, deprecated since 2022-09-06 and version 1.184.0 in favor of sorting
     * @param sorting List of order clauses in which the elements will be returned
     * @param stipulationId The IDs of stipulations that need to be filtered
     * @param stipulationTypeId The type IDs of stipulations that need to be filtered
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCreditApplicationStipulations(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<FindStipulationsResponse>;
    public findCreditApplicationStipulations(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<FindStipulationsResponse>>;
    public findCreditApplicationStipulations(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<FindStipulationsResponse>>;
    public findCreditApplicationStipulations(creditApplicationId: string, count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, stipulationId?: Set<string>, stipulationTypeId?: Set<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling findCreditApplicationStipulations.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (count !== undefined && count !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>count, 'count');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sort_by');
            })
        }
        if (sorting) {
            sorting.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sorting');
            })
        }
        if (stipulationId) {
            stipulationId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'stipulation_id');
            })
        }
        if (stipulationTypeId) {
            stipulationTypeId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'stipulation_type_id');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations`;
        return this.httpClient.request<FindStipulationsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find credit applications
     * This endpoint retrieves a filtered list of credit applications.
     * @param count The maximum number of elements to be returned
     * @param offset The number of elements to skip before returning the requested list of elements
     * @param sortBy List of order clauses in which the elements will be returned, deprecated since 2022-09-06 and version 1.184.0 in favor of sorting
     * @param sorting List of order clauses in which the elements will be returned
     * @param salesQuoteId The IDs of sales quotes by which the linked credit applications need to be filtered. This query parameter can be used in parallel with the &#x60;amendment_quote_id&#x60; query parameter, such that you are able to find credit applications linked to both specific sales quotes and amendment quotes. 
     * @param amendmentQuoteId The IDs of amendment quotes by which the linked credit applications need to be filtered. This query parameter can be used in parallel with the &#x60;sales_quote_id&#x60; query parameter, such that you are able to find credit applications linked to both specific sales quotes and amendment quotes. 
     * @param creditApplicationStatus The IDs of the possible credit application statuses
     * @param brokerCompanyId The IDs of the broker companies of which the credit applications should be retrieved
     * @param customerId The IDs of the customers linked to the active credit applications to filter by
     * @param brokerContactId The IDs of the broker contacts of which the credit applications should be retrieved
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCreditApplications(count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, salesQuoteId?: Set<string>, amendmentQuoteId?: Set<string>, creditApplicationStatus?: Set<string>, brokerCompanyId?: Set<string>, customerId?: Set<string>, brokerContactId?: Set<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<FindCreditApplicationsResponse>;
    public findCreditApplications(count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, salesQuoteId?: Set<string>, amendmentQuoteId?: Set<string>, creditApplicationStatus?: Set<string>, brokerCompanyId?: Set<string>, customerId?: Set<string>, brokerContactId?: Set<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<FindCreditApplicationsResponse>>;
    public findCreditApplications(count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, salesQuoteId?: Set<string>, amendmentQuoteId?: Set<string>, creditApplicationStatus?: Set<string>, brokerCompanyId?: Set<string>, customerId?: Set<string>, brokerContactId?: Set<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<FindCreditApplicationsResponse>>;
    public findCreditApplications(count?: number, offset?: number, sortBy?: Array<string>, sorting?: Array<string>, salesQuoteId?: Set<string>, amendmentQuoteId?: Set<string>, creditApplicationStatus?: Set<string>, brokerCompanyId?: Set<string>, customerId?: Set<string>, brokerContactId?: Set<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (count !== undefined && count !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>count, 'count');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sort_by');
            })
        }
        if (sorting) {
            sorting.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sorting');
            })
        }
        if (salesQuoteId) {
            salesQuoteId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sales_quote_id');
            })
        }
        if (amendmentQuoteId) {
            amendmentQuoteId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'amendment_quote_id');
            })
        }
        if (creditApplicationStatus) {
            creditApplicationStatus.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'credit_application_status');
            })
        }
        if (brokerCompanyId) {
            brokerCompanyId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'broker_company_id');
            })
        }
        if (customerId) {
            customerId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'customer_id');
            })
        }
        if (brokerContactId) {
            brokerContactId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'broker_contact_id');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications`;
        return this.httpClient.request<FindCreditApplicationsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get applicant credit score
     * This endpoint retrieves the information of an applicant credit score by ID.
     * @param creditApplicationId The ID of the credit application
     * @param applicantCreditScoreId The ID of the applicant credit score
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApplicantCreditScore>;
    public getApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApplicantCreditScore>>;
    public getApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApplicantCreditScore>>;
    public getApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling getApplicantCreditScore.');
        }
        if (applicantCreditScoreId === null || applicantCreditScoreId === undefined) {
            throw new Error('Required parameter applicantCreditScoreId was null or undefined when calling getApplicantCreditScore.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicant-credit-scores/${this.configuration.encodeParam({name: "applicantCreditScoreId", value: applicantCreditScoreId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<ApplicantCreditScore>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get credit application
     * This endpoint retrieves the information of a credit application by ID.
     * @param creditApplicationId The ID of the credit application
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCreditApplication(creditApplicationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CreditApplication>;
    public getCreditApplication(creditApplicationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CreditApplication>>;
    public getCreditApplication(creditApplicationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CreditApplication>>;
    public getCreditApplication(creditApplicationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling getCreditApplication.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<CreditApplication>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reopen credit application
     * This endpoint makes a deep copy of the credit application and linked sales quote for further editing.
     * @param reopenCreditApplicationRequest The information needed to reopen a credit application
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reopenCreditApplication(reopenCreditApplicationRequest: ReopenCreditApplicationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ReopenedCreditApplication>;
    public reopenCreditApplication(reopenCreditApplicationRequest: ReopenCreditApplicationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ReopenedCreditApplication>>;
    public reopenCreditApplication(reopenCreditApplicationRequest: ReopenCreditApplicationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ReopenedCreditApplication>>;
    public reopenCreditApplication(reopenCreditApplicationRequest: ReopenCreditApplicationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (reopenCreditApplicationRequest === null || reopenCreditApplicationRequest === undefined) {
            throw new Error('Required parameter reopenCreditApplicationRequest was null or undefined when calling reopenCreditApplication.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/reopenings`;
        return this.httpClient.request<ReopenedCreditApplication>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: reopenCreditApplicationRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Submit credit application
     * This endpoint submits a credit application based on its ID.
     * @param creditApplicationId The ID of the credit application
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public submitCreditApplication(creditApplicationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SubmitCreditApplication>;
    public submitCreditApplication(creditApplicationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SubmitCreditApplication>>;
    public submitCreditApplication(creditApplicationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SubmitCreditApplication>>;
    public submitCreditApplication(creditApplicationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling submitCreditApplication.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/submissions`;
        return this.httpClient.request<SubmitCreditApplication>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update applicant credit score
     * This endpoint updates the information of an applicant credit score based on its ID.
     * @param creditApplicationId The ID of the credit application
     * @param applicantCreditScoreId The ID of the applicant credit score
     * @param updateApplicantCreditScoreRequest The information of the applicant credit score that needs to be updated:
     * @param ignoreWarnings Indicates whether warnings should be ignored. If set to true, interactive warnings will be ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, updateApplicantCreditScoreRequest: UpdateApplicantCreditScoreRequest, ignoreWarnings?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UpdateApplicantCreditScoreResponse>;
    public updateApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, updateApplicantCreditScoreRequest: UpdateApplicantCreditScoreRequest, ignoreWarnings?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UpdateApplicantCreditScoreResponse>>;
    public updateApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, updateApplicantCreditScoreRequest: UpdateApplicantCreditScoreRequest, ignoreWarnings?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UpdateApplicantCreditScoreResponse>>;
    public updateApplicantCreditScore(creditApplicationId: string, applicantCreditScoreId: string, updateApplicantCreditScoreRequest: UpdateApplicantCreditScoreRequest, ignoreWarnings?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling updateApplicantCreditScore.');
        }
        if (applicantCreditScoreId === null || applicantCreditScoreId === undefined) {
            throw new Error('Required parameter applicantCreditScoreId was null or undefined when calling updateApplicantCreditScore.');
        }
        if (updateApplicantCreditScoreRequest === null || updateApplicantCreditScoreRequest === undefined) {
            throw new Error('Required parameter updateApplicantCreditScoreRequest was null or undefined when calling updateApplicantCreditScore.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ignoreWarnings !== undefined && ignoreWarnings !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ignoreWarnings, 'ignore_warnings');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicant-credit-scores/${this.configuration.encodeParam({name: "applicantCreditScoreId", value: applicantCreditScoreId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<UpdateApplicantCreditScoreResponse>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: updateApplicantCreditScoreRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update applicants
     * This endpoint can create, update or delete a joint applicant linked to a credit application. By adding a joint applicant to a credit application, a new applicant credit score will be added, updated or deleted. Note that new individual customers can be created as well to add as applicants.
     * @param creditApplicationId The ID of the credit application
     * @param updateApplicantsRequest The information needed to update the applicants of the credit application:
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateApplicants(creditApplicationId: string, updateApplicantsRequest: UpdateApplicantsRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UpdatedApplicantsCreditApplication>;
    public updateApplicants(creditApplicationId: string, updateApplicantsRequest: UpdateApplicantsRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UpdatedApplicantsCreditApplication>>;
    public updateApplicants(creditApplicationId: string, updateApplicantsRequest: UpdateApplicantsRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UpdatedApplicantsCreditApplication>>;
    public updateApplicants(creditApplicationId: string, updateApplicantsRequest: UpdateApplicantsRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling updateApplicants.');
        }
        if (updateApplicantsRequest === null || updateApplicantsRequest === undefined) {
            throw new Error('Required parameter updateApplicantsRequest was null or undefined when calling updateApplicants.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicants`;
        return this.httpClient.request<UpdatedApplicantsCreditApplication>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: updateApplicantsRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update credit application
     * This endpoint updates the dynamic attributes of a credit application based on its ID.
     * @param creditApplicationId The ID of the credit application
     * @param updateCreditApplicationRequest The information of the credit application that needs to be updated:
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCreditApplication(creditApplicationId: string, updateCreditApplicationRequest: UpdateCreditApplicationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UpdateCreditApplicationResponse>;
    public updateCreditApplication(creditApplicationId: string, updateCreditApplicationRequest: UpdateCreditApplicationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UpdateCreditApplicationResponse>>;
    public updateCreditApplication(creditApplicationId: string, updateCreditApplicationRequest: UpdateCreditApplicationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UpdateCreditApplicationResponse>>;
    public updateCreditApplication(creditApplicationId: string, updateCreditApplicationRequest: UpdateCreditApplicationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling updateCreditApplication.');
        }
        if (updateCreditApplicationRequest === null || updateCreditApplicationRequest === undefined) {
            throw new Error('Required parameter updateCreditApplicationRequest was null or undefined when calling updateCreditApplication.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<UpdateCreditApplicationResponse>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: updateCreditApplicationRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload applicant credit score stipulation document
     * This endpoint uploads a document to the stipulation of an applicant credit score.
     * @param creditApplicationId The ID of the credit application
     * @param applicantCreditScoreId The ID of the applicant credit score
     * @param stipulationId The ID of the stipulation
     * @param file The file to be attached
     * @param description The description for the file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, file: Blob, description?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UploadApplicantCreditScoreStipulationDocumentResponse>;
    public uploadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, file: Blob, description?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UploadApplicantCreditScoreStipulationDocumentResponse>>;
    public uploadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, file: Blob, description?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UploadApplicantCreditScoreStipulationDocumentResponse>>;
    public uploadApplicantCreditScoreStipulationDocument(creditApplicationId: string, applicantCreditScoreId: string, stipulationId: string, file: Blob, description?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling uploadApplicantCreditScoreStipulationDocument.');
        }
        if (applicantCreditScoreId === null || applicantCreditScoreId === undefined) {
            throw new Error('Required parameter applicantCreditScoreId was null or undefined when calling uploadApplicantCreditScoreStipulationDocument.');
        }
        if (stipulationId === null || stipulationId === undefined) {
            throw new Error('Required parameter stipulationId was null or undefined when calling uploadApplicantCreditScoreStipulationDocument.');
        }
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadApplicantCreditScoreStipulationDocument.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('file', <any>file) as any || localVarFormParams;
        }
        if (description !== undefined) {
            localVarFormParams = localVarFormParams.append('description', <any>description) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/applicant-credit-scores/${this.configuration.encodeParam({name: "applicantCreditScoreId", value: applicantCreditScoreId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/${this.configuration.encodeParam({name: "stipulationId", value: stipulationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents`;
        return this.httpClient.request<UploadApplicantCreditScoreStipulationDocumentResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload credit application stipulation document
     * This endpoint uploads a document to the stipulation of a credit application.
     * @param creditApplicationId The ID of the credit application
     * @param stipulationId The ID of the stipulation
     * @param file The file to be attached
     * @param description The description for the file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, file: Blob, description?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UploadCreditApplicationStipulationDocumentResponse>;
    public uploadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, file: Blob, description?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UploadCreditApplicationStipulationDocumentResponse>>;
    public uploadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, file: Blob, description?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UploadCreditApplicationStipulationDocumentResponse>>;
    public uploadCreditApplicationStipulationDocument(creditApplicationId: string, stipulationId: string, file: Blob, description?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling uploadCreditApplicationStipulationDocument.');
        }
        if (stipulationId === null || stipulationId === undefined) {
            throw new Error('Required parameter stipulationId was null or undefined when calling uploadCreditApplicationStipulationDocument.');
        }
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadCreditApplicationStipulationDocument.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('file', <any>file) as any || localVarFormParams;
        }
        if (description !== undefined) {
            localVarFormParams = localVarFormParams.append('description', <any>description) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stipulations/${this.configuration.encodeParam({name: "stipulationId", value: stipulationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents`;
        return this.httpClient.request<UploadCreditApplicationStipulationDocumentResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Validate credit application
     * This endpoint validates the credit application.  We have a custom validation model for this validation, this custom validation model exists out of the response of multiple endpoints you can find [more information here](#tag/model_credit_application_root).
     * @param creditApplicationId The ID of the credit application
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateCreditApplication(creditApplicationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CreditApplicationViolations>;
    public validateCreditApplication(creditApplicationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CreditApplicationViolations>>;
    public validateCreditApplication(creditApplicationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CreditApplicationViolations>>;
    public validateCreditApplication(creditApplicationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (creditApplicationId === null || creditApplicationId === undefined) {
            throw new Error('Required parameter creditApplicationId was null or undefined when calling validateCreditApplication.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/credit-applications/${this.configuration.encodeParam({name: "creditApplicationId", value: creditApplicationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/validations`;
        return this.httpClient.request<CreditApplicationViolations>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
