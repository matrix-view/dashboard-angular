/**
 * miles-quotation
 * This service supports creation, calculation and follow-up of sales quotes (price proposals), typically    involving selection/configuration of a vehicle/asset and a choice of finance or rental product.
 *
 * The version of the OpenAPI document: 4.113.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AvailableQuotationTemplateRequest } from '../model/available-quotation-template-request';
// @ts-ignore
import { AvailableQuotationTemplatesResponse } from '../model/available-quotation-templates-response';
// @ts-ignore
import { ExceptionInfoDTO } from '../model/exception-info-dto';
// @ts-ignore
import { GetQuotationTemplate } from '../model/get-quotation-template';
// @ts-ignore
import { InputRestrictionsRequest } from '../model/input-restrictions-request';
// @ts-ignore
import { InputRestrictionsResponse } from '../model/input-restrictions-response';
// @ts-ignore
import { QuotationTemplateAllowedServices } from '../model/quotation-template-allowed-services';
// @ts-ignore
import { QuotationTemplateResponse } from '../model/quotation-template-response';
// @ts-ignore
import { SalesQuoteDefaultsRequest } from '../model/sales-quote-defaults-request';
// @ts-ignore
import { SalesQuoteDefaultsResponse } from '../model/sales-quote-defaults-response';
// @ts-ignore
import { WarningsInfoDTO } from '../model/warnings-info-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class QuotationTemplateResourceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Get the available quotation templates
     * This endpoint evaluates a set of field and value pairs according to a set of rules in order to provide the available quotation templates.If the configuration of the rules has not been provided, this endpoint will result in a 501 (Not Implemented) error code.
     * @param availableQuotationTemplateRequest Data required to do an evaluation for the available quotation templates
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public evaluateToQuotationTemplates(availableQuotationTemplateRequest: AvailableQuotationTemplateRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AvailableQuotationTemplatesResponse>;
    public evaluateToQuotationTemplates(availableQuotationTemplateRequest: AvailableQuotationTemplateRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AvailableQuotationTemplatesResponse>>;
    public evaluateToQuotationTemplates(availableQuotationTemplateRequest: AvailableQuotationTemplateRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AvailableQuotationTemplatesResponse>>;
    public evaluateToQuotationTemplates(availableQuotationTemplateRequest: AvailableQuotationTemplateRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (availableQuotationTemplateRequest === null || availableQuotationTemplateRequest === undefined) {
            throw new Error('Required parameter availableQuotationTemplateRequest was null or undefined when calling evaluateToQuotationTemplates.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/quotation-templates/evaluations`;
        return this.httpClient.request<AvailableQuotationTemplatesResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: availableQuotationTemplateRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the allowed services for a quotation template
     * This endpoint retrieves the allowed services for a customer or generic quotation template based on the quotation template ID. The unavailable services get filtered out based on the product configuration.
     * @param quotationTemplateId The ID of the customer or generic quotation template
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllowedServices(quotationTemplateId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<QuotationTemplateAllowedServices>;
    public getAllowedServices(quotationTemplateId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<QuotationTemplateAllowedServices>>;
    public getAllowedServices(quotationTemplateId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<QuotationTemplateAllowedServices>>;
    public getAllowedServices(quotationTemplateId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (quotationTemplateId === null || quotationTemplateId === undefined) {
            throw new Error('Required parameter quotationTemplateId was null or undefined when calling getAllowedServices.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/quotation-templates/${this.configuration.encodeParam({name: "quotationTemplateId", value: quotationTemplateId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/allowed-services`;
        return this.httpClient.request<QuotationTemplateAllowedServices>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get quotation template
     * This endpoint retrieves a quotation template by ID.
     * @param quotationTemplateId ID of the quotation
     * @param includeAdditionalContent Boolean to indicate if additional additionalContent attribute is fetched.
     * @param additionalContentKey The key(s) on which the additional content must be filtered, this will be ignored if \&#39;include_additional_content\&#39; is false.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableQuotationTemplate(quotationTemplateId: string, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetQuotationTemplate>;
    public getAvailableQuotationTemplate(quotationTemplateId: string, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetQuotationTemplate>>;
    public getAvailableQuotationTemplate(quotationTemplateId: string, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetQuotationTemplate>>;
    public getAvailableQuotationTemplate(quotationTemplateId: string, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (quotationTemplateId === null || quotationTemplateId === undefined) {
            throw new Error('Required parameter quotationTemplateId was null or undefined when calling getAvailableQuotationTemplate.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (includeAdditionalContent !== undefined && includeAdditionalContent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeAdditionalContent, 'include_additional_content');
        }
        if (additionalContentKey) {
            additionalContentKey.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'additional_content_key');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/quotation-templates/${this.configuration.encodeParam({name: "quotationTemplateId", value: quotationTemplateId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<GetQuotationTemplate>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find available quotation templates
     * This endpoint retrieves a list of quotation templates. Either use the driver ID or the contact categories to retrieve the quotation templates (optional). The quotation templates of commercial parents are included.
     * @param customerId ID(s) of the customer(s)
     * @param driverId ID(s) of the driver(s)
     * @param contactCategories ID(s) of the contact category(ies)
     * @param mobilityPartType The type of mobility part
     * @param includeObjectInformation Use \&#39;include_additional_content\&#39; instead.
     * @param includeAdditionalContent Boolean to indicate if additional additionalContent attribute is fetched.
     * @param additionalContentKey The key(s) on which the additional content must be filtered, this will be ignored if \&#39;include_additional_content\&#39; is false.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableQuotationTemplates(customerId?: Set<string>, driverId?: Array<string>, contactCategories?: Set<string>, mobilityPartType?: string, includeObjectInformation?: boolean, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<QuotationTemplateResponse>;
    public getAvailableQuotationTemplates(customerId?: Set<string>, driverId?: Array<string>, contactCategories?: Set<string>, mobilityPartType?: string, includeObjectInformation?: boolean, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<QuotationTemplateResponse>>;
    public getAvailableQuotationTemplates(customerId?: Set<string>, driverId?: Array<string>, contactCategories?: Set<string>, mobilityPartType?: string, includeObjectInformation?: boolean, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<QuotationTemplateResponse>>;
    public getAvailableQuotationTemplates(customerId?: Set<string>, driverId?: Array<string>, contactCategories?: Set<string>, mobilityPartType?: string, includeObjectInformation?: boolean, includeAdditionalContent?: boolean, additionalContentKey?: Set<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (customerId) {
            customerId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'customer_id');
            })
        }
        if (driverId) {
            driverId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'driver_id');
            })
        }
        if (contactCategories) {
            contactCategories.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'contact_categories');
            })
        }
        if (mobilityPartType !== undefined && mobilityPartType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mobilityPartType, 'mobility_part_type');
        }
        if (includeObjectInformation !== undefined && includeObjectInformation !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeObjectInformation, 'include_object_information');
        }
        if (includeAdditionalContent !== undefined && includeAdditionalContent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeAdditionalContent, 'include_additional_content');
        }
        if (additionalContentKey) {
            additionalContentKey.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'additional_content_key');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/quotation-templates`;
        return this.httpClient.request<QuotationTemplateResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the defaulted sales quote request
     * This endpoint returns the defaulted sales quote request according to a set of rules provided in a configuration file.
     * @param quotationTemplateId The ID of the quotation template
     * @param salesQuoteDefaultsRequest Data required
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDefaultedSalesQuoteRequest(quotationTemplateId: string, salesQuoteDefaultsRequest: SalesQuoteDefaultsRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SalesQuoteDefaultsResponse>;
    public getDefaultedSalesQuoteRequest(quotationTemplateId: string, salesQuoteDefaultsRequest: SalesQuoteDefaultsRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SalesQuoteDefaultsResponse>>;
    public getDefaultedSalesQuoteRequest(quotationTemplateId: string, salesQuoteDefaultsRequest: SalesQuoteDefaultsRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SalesQuoteDefaultsResponse>>;
    public getDefaultedSalesQuoteRequest(quotationTemplateId: string, salesQuoteDefaultsRequest: SalesQuoteDefaultsRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (quotationTemplateId === null || quotationTemplateId === undefined) {
            throw new Error('Required parameter quotationTemplateId was null or undefined when calling getDefaultedSalesQuoteRequest.');
        }
        if (salesQuoteDefaultsRequest === null || salesQuoteDefaultsRequest === undefined) {
            throw new Error('Required parameter salesQuoteDefaultsRequest was null or undefined when calling getDefaultedSalesQuoteRequest.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/quotation-templates/${this.configuration.encodeParam({name: "quotationTemplateId", value: quotationTemplateId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/sales-quotes-defaults`;
        return this.httpClient.request<SalesQuoteDefaultsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: salesQuoteDefaultsRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get quotation template input restrictions
     * This endpoint retrieves the input restrictions of a quotation template by ID.
     * @param quotationTemplateId ID of the quotation
     * @param inputRestrictionsRequest Data required to filter the input restrictions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInputRestrictions(quotationTemplateId: string, inputRestrictionsRequest: InputRestrictionsRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<InputRestrictionsResponse>;
    public getInputRestrictions(quotationTemplateId: string, inputRestrictionsRequest: InputRestrictionsRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<InputRestrictionsResponse>>;
    public getInputRestrictions(quotationTemplateId: string, inputRestrictionsRequest: InputRestrictionsRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<InputRestrictionsResponse>>;
    public getInputRestrictions(quotationTemplateId: string, inputRestrictionsRequest: InputRestrictionsRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (quotationTemplateId === null || quotationTemplateId === undefined) {
            throw new Error('Required parameter quotationTemplateId was null or undefined when calling getInputRestrictions.');
        }
        if (inputRestrictionsRequest === null || inputRestrictionsRequest === undefined) {
            throw new Error('Required parameter inputRestrictionsRequest was null or undefined when calling getInputRestrictions.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Roles) required
        localVarCredential = this.configuration.lookupCredential('Roles');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/quotation-templates/${this.configuration.encodeParam({name: "quotationTemplateId", value: quotationTemplateId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/input-restrictions`;
        return this.httpClient.request<InputRestrictionsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: inputRestrictionsRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
